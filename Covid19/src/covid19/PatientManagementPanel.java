/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package covid19;
import Profile.*;
import Patient.*;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author PC
 */
public class PatientManagementPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatientManagementPanel
     */
    public PatientManagementPanel() {
        initComponents();
        refreshTable();
        filterOption.add("ID");
        filterOption.add("Fullname");
        filterOption.add("YoB");
        filterOption.add("Address");
        filterOption.add("Status");
        filterOption.add("Treatment");
        choice1.add("TP Hồ Chí Minh");
        choice1.add("Hà Nội");
        choice1.add("Đà Nẵng");
        choice1.add("Quảng Ngãi");
        choice1.add("Quảng Nam");
        choice2.add("Quận 1");
        choice2.add("Quận 2");
        choice2.add("Quận 3");
        choice2.add("Quận 4");
        choice2.add("Quận 5");
        choice3.add("Bến Nghé");
        choice3.add("Bến Thành");
        choice3.add("Cô Giang");
        choice3.add("Cầu Kho");
        choice3.add("Cầu Ông Lãnh");
    }
    public void clearTextField() {
        txfAddress.setText("");
        txfFullname.setText("");
        txfID.setText("");
        txfTreatment.setText("");
        txfStatus.setText("");
        txfYoB.setText("");
    }
    
    public void refreshTable() {
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        model.setRowCount(0);
        List<Profile> list = PatientInf.getAllPatient();
        for (int i = 0; i < list.size(); i++) 
            model.addRow(new Object[]{list.get(i).getID(), list.get(i).getFullName(), (list.get(i).getYoB()), list.get(i).getAddress(), list.get(i).getStatus(), list.get(i).getTreatment(), (list.get(i).getDebt())});
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTittle = new javax.swing.JLabel();
        pnlContent = new javax.swing.JPanel();
        pnlInformation = new javax.swing.JPanel();
        pnlInforInput = new javax.swing.JPanel();
        lblID = new javax.swing.JLabel();
        lblFullname = new javax.swing.JLabel();
        lblYoB = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblTreatment = new javax.swing.JLabel();
        txfID = new javax.swing.JTextField();
        txfYoB = new javax.swing.JTextField();
        txfAddress = new javax.swing.JTextField();
        txfTreatment = new javax.swing.JTextField();
        txfStatus = new javax.swing.JTextField();
        txfFullname = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        choice1 = new java.awt.Choice();
        choice2 = new java.awt.Choice();
        choice3 = new java.awt.Choice();
        lblSubtittleRight = new javax.swing.JLabel();
        pnlInforButton = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnFind = new javax.swing.JButton();
        btnViewRelated = new javax.swing.JButton();
        btnHosptTranfer = new javax.swing.JButton();
        filterOption = new java.awt.Choice();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        scrollpnlPatient = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(988, 529));

        lblTittle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTittle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTittle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Patients-32.png"))); // NOI18N
        lblTittle.setText("Covid-19 Patient Management");
        lblTittle.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        pnlInforInput.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblID.setText("ID:");

        lblFullname.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblFullname.setText("Fullname:");

        lblYoB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblYoB.setText("Year of birth:");

        lblAddress.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblAddress.setText("Address:");

        lblStatus.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblStatus.setText("Status:");

        lblTreatment.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTreatment.setText("Treatment:");

        txfID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfIDActionPerformed(evt);
            }
        });

        txfYoB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfYoBActionPerformed(evt);
            }
        });

        txfTreatment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfTreatmentActionPerformed(evt);
            }
        });

        txfStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfStatusActionPerformed(evt);
            }
        });

        txfFullname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfFullnameActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("City/Province:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("District/Town:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Ward:");

        choice1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                choice1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                choice1MousePressed(evt);
            }
        });
        choice1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choice1ItemStateChanged(evt);
            }
        });

        choice2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                choice2ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlInforInputLayout = new javax.swing.GroupLayout(pnlInforInput);
        pnlInforInput.setLayout(pnlInforInputLayout);
        pnlInforInputLayout.setHorizontalGroup(
            pnlInforInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInforInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInforInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInforInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblTreatment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblYoB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblFullname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblAddress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addGap(4, 4, 4)
                .addGroup(pnlInforInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txfYoB, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                    .addComponent(txfFullname, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txfID, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txfAddress, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txfTreatment)
                    .addComponent(txfStatus)
                    .addComponent(choice3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(choice2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(choice1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlInforInputLayout.setVerticalGroup(
            pnlInforInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInforInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInforInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlInforInputLayout.createSequentialGroup()
                        .addGroup(pnlInforInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txfID, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlInforInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblFullname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txfFullname, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlInforInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblYoB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txfYoB, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3))
                    .addComponent(choice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlInforInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(choice2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInforInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(choice3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlInforInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txfAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlInforInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txfStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlInforInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblTreatment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txfTreatment, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        lblSubtittleRight.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSubtittleRight.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSubtittleRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/about.png"))); // NOI18N
        lblSubtittleRight.setText("Patient Information");

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/add.png"))); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/edit.png"))); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/sub.png"))); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/refresh.png"))); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnFind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/search.png"))); // NOI18N
        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        btnViewRelated.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/view.png"))); // NOI18N
        btnViewRelated.setText("View Related");
        btnViewRelated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewRelatedActionPerformed(evt);
            }
        });

        btnHosptTranfer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/hospital.png"))); // NOI18N
        btnHosptTranfer.setText("Hospital Transfer");
        btnHosptTranfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHosptTranferActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlInforButtonLayout = new javax.swing.GroupLayout(pnlInforButton);
        pnlInforButton.setLayout(pnlInforButtonLayout);
        pnlInforButtonLayout.setHorizontalGroup(
            pnlInforButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInforButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInforButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnHosptTranfer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlInforButtonLayout.createSequentialGroup()
                        .addGroup(pnlInforButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlInforButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnFind, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlInforButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnViewRelated, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))))
                .addContainerGap())
        );
        pnlInforButtonLayout.setVerticalGroup(
            pnlInforButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInforButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInforButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEdit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlInforButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnFind, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnViewRelated, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHosptTranfer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        filterOption.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterOptionItemStateChanged(evt);
            }
        });

        jLabel2.setText("Filter:");

        javax.swing.GroupLayout pnlInformationLayout = new javax.swing.GroupLayout(pnlInformation);
        pnlInformation.setLayout(pnlInformationLayout);
        pnlInformationLayout.setHorizontalGroup(
            pnlInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInformationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInformationLayout.createSequentialGroup()
                        .addComponent(lblSubtittleRight, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterOption, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlInforInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlInforButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlInformationLayout.setVerticalGroup(
            pnlInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInformationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblSubtittleRight, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(filterOption, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlInforInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlInforButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tblPatient.setAutoCreateRowSorter(true);
        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Fullname", "Year of birth", "Address", "Status", "Treatment", "Debt"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPatientMouseClicked(evt);
            }
        });
        scrollpnlPatient.setViewportView(tblPatient);
        if (tblPatient.getColumnModel().getColumnCount() > 0) {
            tblPatient.getColumnModel().getColumn(0).setPreferredWidth(20);
            tblPatient.getColumnModel().getColumn(1).setPreferredWidth(70);
            tblPatient.getColumnModel().getColumn(2).setPreferredWidth(55);
            tblPatient.getColumnModel().getColumn(3).setPreferredWidth(150);
            tblPatient.getColumnModel().getColumn(4).setPreferredWidth(35);
            tblPatient.getColumnModel().getColumn(5).setPreferredWidth(50);
            tblPatient.getColumnModel().getColumn(6).setPreferredWidth(50);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("List of Patient");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrollpnlPatient, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrollpnlPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlContentLayout = new javax.swing.GroupLayout(pnlContent);
        pnlContent.setLayout(pnlContentLayout);
        pnlContentLayout.setHorizontalGroup(
            pnlContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlContentLayout.setVerticalGroup(
            pnlContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlContentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTittle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTittle, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlContent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txfIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfIDActionPerformed

    private void txfYoBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfYoBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfYoBActionPerformed

    private void txfTreatmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfTreatmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfTreatmentActionPerformed

    private void txfStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfStatusActionPerformed

    private void txfFullnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfFullnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfFullnameActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if(txfAddress.getText().equals("") || txfFullname.getText().equals("") || txfID.getText().equals("") || txfStatus.getText().equals("") || txfTreatment.getText().equals("") || txfYoB.getText().equals(""))
            JOptionPane.showMessageDialog(this, "Required fields cannot be blank", "Notification", JOptionPane.INFORMATION_MESSAGE);
        else if(PatientInf.addPatient(txfID.getText(), txfFullname.getText(), Integer.parseInt(txfYoB.getText()), txfAddress.getText() + ", " + choice3.getSelectedItem() + ", " + choice2.getSelectedItem() + ", " + choice1.getSelectedItem(), txfStatus.getText(), txfTreatment.getText())) {
            JOptionPane.showMessageDialog(this, "Add successfully", "Notification", JOptionPane.INFORMATION_MESSAGE);
            refreshTable();
            clearTextField();
        }
        else
            JOptionPane.showMessageDialog(this, "Add failed", "Notification", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if(txfID.getText().equals(""))
            JOptionPane.showMessageDialog(this, "ID field cannot be blank", "Notification", JOptionPane.ERROR_MESSAGE);
        else {
            int result = JOptionPane.showConfirmDialog(this, "Do you want to save the changes", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(result == JOptionPane.YES_OPTION){
                if(txfAddress.getText().equals("") || txfFullname.getText().equals("") || txfStatus.getText().equals("") || txfYoB.getText().equals(""))
                    JOptionPane.showMessageDialog(this, "Required fields cannot be blank", "Notification", JOptionPane.ERROR_MESSAGE);
                else {
                    if(PatientInf.updatePatient(txfID.getText(), txfFullname.getText(), Integer.parseInt(txfYoB.getText()), txfAddress.getText(), txfStatus.getText())) {
                        JOptionPane.showMessageDialog(this, "Update successfully", "Notification", JOptionPane.INFORMATION_MESSAGE);
                        refreshTable();
                        clearTextField();
                    }
                    else
                        JOptionPane.showMessageDialog(this, "Update failed", "Notification", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        if(txfID.getText().equals(""))
            JOptionPane.showMessageDialog(this, "ID field cannot be blank", "Notification", JOptionPane.ERROR_MESSAGE);
        else {
            String id = txfID.getText();
            int result = JOptionPane.showConfirmDialog(this, "Do you want to save the changes", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(result == JOptionPane.YES_OPTION){
                if(PatientInf.deletePatient(id)) {
                    JOptionPane.showMessageDialog(this, "Remove successfully", "Notification", JOptionPane.INFORMATION_MESSAGE);
                    refreshTable();
                    clearTextField();
                }
                else
                    JOptionPane.showMessageDialog(this, "Remove failed", "Notification", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        refreshTable();
        clearTextField();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        List<Profile> list = null;
        if (filterOption.getSelectedItem().equals("ID")) {
            if (txfID.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "ID field cannot be blank", "Notification", JOptionPane.ERROR_MESSAGE);
                return;
            }
            list = PatientInf.getPatientByFilter(txfID.getText(), "ID");  
        }
        else if (filterOption.getSelectedItem().equals("Fullname")) {
            if (txfFullname.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Fullname field cannot be blank", "Notification", JOptionPane.ERROR_MESSAGE);
                return;
            }
            list = PatientInf.getPatientByFilter(txfFullname.getText(), "Fullname");
        }
        else if (filterOption.getSelectedItem().equals("YoB")) {
            if (txfYoB.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "YoB field cannot be blank", "Notification", JOptionPane.ERROR_MESSAGE);
                return;
            }
           list = PatientInf.getPatientByFilter(txfYoB.getText(), "YoB");
        }
        else if (filterOption.getSelectedItem().equals("Address")) {
            if (txfAddress.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Address field cannot be blank", "Notification", JOptionPane.ERROR_MESSAGE);
                return;
            }
           list = PatientInf.getPatientByFilter(txfAddress.getText(), "Address");
        }
        else if (filterOption.getSelectedItem().equals("Status")) {
            if (txfStatus.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Status field cannot be blank", "Notification", JOptionPane.ERROR_MESSAGE);
                return;
            }
           list = PatientInf.getPatientByFilter(txfStatus.getText(), "Status"); 
        }
        else if (filterOption.getSelectedItem().equals("Treatment")) {
            if (txfTreatment.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "Treatment field cannot be blank", "Notification", JOptionPane.ERROR_MESSAGE);
                return;
            }
           list = PatientInf.getPatientByFilter(txfTreatment.getText(), "Treatment");
        }
        if (!list.isEmpty()) {
            DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
            model.setRowCount(0);
            for (int i = 0; i < list.size(); i++) 
                model.addRow(new Object[]{list.get(i).getID(), list.get(i).getFullName(), Integer.toString(list.get(i).getYoB()), list.get(i).getAddress(), list.get(i).getStatus(), list.get(i).getTreatment(), Double.toString(list.get(i).getDebt())});
        }
        else
            JOptionPane.showMessageDialog(this, "No result found", "Notification", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnViewRelatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewRelatedActionPerformed
        ViewRelatedFrame viewRelatedFrame = new ViewRelatedFrame();
        viewRelatedFrame.setTitle("Related management");
        viewRelatedFrame.setVisible(true);
    }//GEN-LAST:event_btnViewRelatedActionPerformed

    private void btnHosptTranferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHosptTranferActionPerformed
        if(txfID.getText().equals(""))
            JOptionPane.showMessageDialog(this, "ID field cannot be blank", "Notification", JOptionPane.ERROR_MESSAGE);
        else {
            String id = txfID.getText();
            HospitalTransferFrame transferFrame = new HospitalTransferFrame(id);
            transferFrame.setTitle("Transfer hospital");
            transferFrame.setVisible(true);
        } 
    }//GEN-LAST:event_btnHosptTranferActionPerformed

    private void tblPatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPatientMouseClicked
        clearTextField();
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        int selectedRowIndex = tblPatient.getSelectedRow();
        if(model.getValueAt(selectedRowIndex, 3) != null)
            txfAddress.setText(model.getValueAt(selectedRowIndex, 3).toString());
        if(model.getValueAt(selectedRowIndex, 1) != null)
            txfFullname.setText(model.getValueAt(selectedRowIndex, 1).toString());
        if(model.getValueAt(selectedRowIndex, 0) != null)
            txfID.setText(model.getValueAt(selectedRowIndex, 0).toString());
        if(model.getValueAt(selectedRowIndex, 2) != null)
            txfYoB.setText(model.getValueAt(selectedRowIndex, 2).toString());
        if(model.getValueAt(selectedRowIndex, 4) != null)
            txfStatus.setText(model.getValueAt(selectedRowIndex, 4).toString());
        if(model.getValueAt(selectedRowIndex, 5) != null)
            txfTreatment.setText(model.getValueAt(selectedRowIndex, 5).toString());
    }//GEN-LAST:event_tblPatientMouseClicked

    private void filterOptionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterOptionItemStateChanged
        clearTextField();
    }//GEN-LAST:event_filterOptionItemStateChanged

    private void choice1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choice1ItemStateChanged
        choice2.removeAll();
        if(choice1.getSelectedItem().equals("TP Hồ Chí Minh")) {
            choice2.add("Quận 1");
            choice2.add("Quận 2");
            choice2.add("Quận 3");
            choice2.add("Quận 4");
            choice2.add("Quận 5");
        }
        else if(choice1.getSelectedItem().equals("Hà Nội")) {
            choice2.add("Ba Đình");
            choice2.add("Đống Đa");
            choice2.add("Hai Bà Trưng");
            choice2.add("Hoàn Kiếm");
            choice2.add("Bắc Từ Liêm");
        }
        else if(choice1.getSelectedItem().equals("Đà Nẵng")) {
            choice2.add("Hải Châu");
            choice2.add("Cẩm Lệ");
            choice2.add("Thanh Khê");
            choice2.add("Liên Chiểu");
            choice2.add("Ngũ Hành Sơn");
        }
        else if(choice1.getSelectedItem().equals("Quảng Ngãi")) {
            choice2.add("Lý Sơn");
            choice2.add("Bình Sơn");
            choice2.add("Trà Bồng");
            choice2.add("Sơn Tịnh");
            choice2.add("Sơn Tây");
        }
        else if(choice1.getSelectedItem().equals("Quảng Nam")) {
            choice2.add("TP Tam Kỳ");
            choice2.add("TP Hội An");
            choice2.add("Núi Thành");
            choice2.add("Phú Ninh");
            choice2.add("Thăng Bình");
        }
    }//GEN-LAST:event_choice1ItemStateChanged

    private void choice1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choice1MouseClicked
        
    }//GEN-LAST:event_choice1MouseClicked

    private void choice1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_choice1MousePressed

    }//GEN-LAST:event_choice1MousePressed

    private void choice2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_choice2ItemStateChanged
        choice3.removeAll();
        if(choice2.getSelectedItem().equals("Quận 1")) {
            choice3.add("Bến Nghé");
            choice3.add("Bến Thành");
            choice3.add("Cô Giang");
            choice3.add("Cầu Kho");
            choice3.add("Cầu Ông Lãnh");
        }
        else if(choice2.getSelectedItem().equals("Quận 2")) {
            choice3.add("An Khánh");
            choice3.add("An Lợi Đông");
            choice3.add("An Phú");
            choice3.add("Bình An");
            choice3.add("Thảo Điền");
        }
        else if(choice2.getSelectedItem().equals("Quận 3")) {
            choice3.add("Phường 1");
            choice3.add("Phường 2");
            choice3.add("Phường 3");
            choice3.add("Phường 4");
            choice3.add("Phường 5");
        }
        else if(choice2.getSelectedItem().equals("Quận 4")) {
            choice3.add("Phường 1");
            choice3.add("Phường 2");
            choice3.add("Phường 3");
            choice3.add("Phường 9");
            choice3.add("Phường 12");
        }
        else if(choice2.getSelectedItem().equals("Quận 5")) {
            choice3.add("Phường 1");
            choice3.add("Phường 2");
            choice3.add("Phường 3");
            choice3.add("Phường 6");
            choice3.add("Phường 7");
        }
        else if(choice2.getSelectedItem().equals("Ba Đình")) {
            choice3.add("Cống Vị");
            choice3.add("Điện Biên");
            choice3.add("Đội Cấn");
            choice3.add("Giảng Võ");
            choice3.add("Kim Mã");
        }
        else if(choice2.getSelectedItem().equals("Đống Đa")) {
            choice3.add("Cát Linh");
            choice3.add("Hàng Bột");
            choice3.add("Khâm Thiên");
            choice3.add("Khương Thượng");
            choice3.add("Kim Liên");
        }
        else if(choice2.getSelectedItem().equals("Hoàn Kiếm")) {
            choice3.add("Chương Dương");
            choice3.add("Cửa Đông");
            choice3.add("Cửa Nam");
            choice3.add("Đồng Xuân");
            choice3.add("Hàng Bạc");
        }
        else if(choice2.getSelectedItem().equals("Hai Bà Trưng")) {
            choice3.add("Nguyễn Du");
            choice3.add("Lê Đại Hành");
            choice3.add("Bùi Thị Xuân");
            choice3.add("Phố Huế");
            choice3.add("Phạm Đình Hổ");
        }
        else if(choice2.getSelectedItem().equals("Bắc Từ Liêm")) {
            choice3.add("Cổ Nhuế 1");
            choice3.add("Cổ Nhuế 2");
            choice3.add("Đức Thắng");
            choice3.add("Đông Ngạc");
            choice3.add("Thụy Phương");
        }
        else if(choice2.getSelectedItem().equals("Hải Châu")) {
            choice3.add("Hải Châu 1");
            choice3.add("Hải Châu 2");
            choice3.add("Thạch Thang");
            choice3.add("Thanh Bình");
            choice3.add("Thuận Phước");
        }
        else if(choice2.getSelectedItem().equals("Cẩm Lệ")) {
            choice3.add("Khuê Trung");
            choice3.add("Hòa Thọ Đông");
            choice3.add("Hòa Thọ Tây");
            choice3.add("Hòa An");
            choice3.add("Hòa Phát");
        }
        else if(choice2.getSelectedItem().equals("Thanh Khê")) {
            choice3.add("Vĩnh Trung");
            choice3.add("Tân Chính");
            choice3.add("Thạc Gián");
            choice3.add("Chính Gián");
            choice3.add("Tam Thuận");
        }
        else if(choice2.getSelectedItem().equals("Liên Chiểu")) {
            choice3.add("Hòa Minh");
            choice3.add("Hòa Khánh Nam");
            choice3.add("Hòa Khánh Bắc");
            choice3.add("Hòa Hiệp Nam");
            choice3.add("Hòa Hiệp Bắc");
        }
        else if(choice2.getSelectedItem().equals("Ngũ Hành Sơn")) {
            choice3.add("Mỹ An");
            choice3.add("Khuê Mỹ");
            choice3.add("Hòa Hải");
            choice3.add("Hòa Quý");
            choice3.add("Khuê Mỹ");
        }
        else if(choice2.getSelectedItem().equals("Lý Sơn")) {
            choice3.add("An Bình");
            choice3.add("An Vĩnh");
            choice3.add("An Hải");
            choice3.add("An Vĩnh");
            choice3.add("An Bình");
        }
        else if(choice2.getSelectedItem().equals("Bình Sơn")) {
            choice3.add("Bình An");
            choice3.add("Bình Chánh");
            choice3.add("Bình Chương");
            choice3.add("Bình Đông");
            choice3.add("Bình Hiệp");
        }
        else if(choice2.getSelectedItem().equals("Trà Bồng")) {
            choice3.add("Hương Trà");
            choice3.add("Sơn Trà");
            choice3.add("Trà Bình");
            choice3.add("Trà Bùi");
            choice3.add("Trà Giang");
        }
        else if(choice2.getSelectedItem().equals("Sơn Tịnh")) {
            choice3.add("Tịnh Minh");
            choice3.add("Tịnh Thọ");
            choice3.add("Tịnh Hạ");
            choice3.add("Tịnh Trà");
            choice3.add("Tịnh Hiệp");
        }
        else if(choice2.getSelectedItem().equals("Sơn Tây")) {
            choice3.add("Lê Lợi");
            choice3.add("Phú Thịnh");
            choice3.add("Quang Trung");
            choice3.add("Sơn Lộc");
            choice3.add("Trung Hưng");
        }
        else if(choice2.getSelectedItem().equals("TP Tam Kỳ")) {
            choice3.add("Tân Thạnh");
            choice3.add("Hòa Thuận");
            choice3.add("An Mỹ");
            choice3.add("An Sơn");
            choice3.add("An Xuân");
        }
        else if(choice2.getSelectedItem().equals("TP Hội An")) {
            choice3.add("Minh An");
            choice3.add("Sơn Phong");
            choice3.add("Cẩm Phô");
            choice3.add("Thanh Hà");
            choice3.add("Tân An");
        }
        else if(choice2.getSelectedItem().equals("Núi Thành")) {
            choice3.add("Tam Xuân");
            choice3.add("Tam Tiến");
            choice3.add("Tam Trà");
            choice3.add("Tam Sơn");
            choice3.add("Tam Anh");
        }
        else if(choice2.getSelectedItem().equals("Phú Ninh")) {
            choice3.add("Tam An");
            choice3.add("Tam Đại");
            choice3.add("Tam Dân");
            choice3.add("Tam Đàn");
            choice3.add("Tam Lãnh");
        }
        else if(choice2.getSelectedItem().equals("Thăng Bình")) {
            choice3.add("Bình An");
            choice3.add("Bình Đào");
            choice3.add("Bình Hải");
            choice3.add("Bình Lâm");
            choice3.add("Bình Nguyên");
        }
    }//GEN-LAST:event_choice2ItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnHosptTranfer;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnViewRelated;
    private java.awt.Choice choice1;
    private java.awt.Choice choice2;
    private java.awt.Choice choice3;
    private java.awt.Choice filterOption;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblFullname;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblSubtittleRight;
    private javax.swing.JLabel lblTittle;
    private javax.swing.JLabel lblTreatment;
    private javax.swing.JLabel lblYoB;
    private javax.swing.JPanel pnlContent;
    private javax.swing.JPanel pnlInforButton;
    private javax.swing.JPanel pnlInforInput;
    private javax.swing.JPanel pnlInformation;
    private javax.swing.JScrollPane scrollpnlPatient;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTextField txfAddress;
    private javax.swing.JTextField txfFullname;
    private javax.swing.JTextField txfID;
    private javax.swing.JTextField txfStatus;
    private javax.swing.JTextField txfTreatment;
    private javax.swing.JTextField txfYoB;
    // End of variables declaration//GEN-END:variables
}
