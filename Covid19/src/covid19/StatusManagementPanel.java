/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package covid19;

import Helper.*;
import ManagedHistory.*;
import Packages.Packages;
import Patient.PatientInf;
import Profile.Profile;
import Related.Related;
import Related.RelatedInf;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author PC
 */
public class StatusManagementPanel extends javax.swing.JPanel {

    private final StringBuilder sb;
    private final String[] statLst = new String[]{"F0", "F1", "F2", "F3", "F4", "F5", "KHỎI BỆNH"};

    /**
     * Creates new form StatusManagementPanel
     */
    public StatusManagementPanel() {
        initComponents();
        sb = new StringBuilder();
        displayTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        pnlLeft = new javax.swing.JPanel();
        pnlForm = new javax.swing.JPanel();
        lblID = new javax.swing.JLabel();
        txfID = new javax.swing.JTextField();
        txfFromStat = new javax.swing.JTextField();
        lblFromStat = new javax.swing.JLabel();
        lblToStat = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        txfDate = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        pnlButton = new javax.swing.JPanel();
        btnRefresh = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnFind = new javax.swing.JButton();
        pnlRight = new javax.swing.JPanel();
        pnlTable = new javax.swing.JPanel();
        srpTable = new javax.swing.JScrollPane();
        tbtStat = new javax.swing.JTable();

        setPreferredSize(new java.awt.Dimension(988, 529));

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/status-48.png"))); // NOI18N
        lblTitle.setText("Status Management");
        lblTitle.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblTitle.setMaximumSize(new java.awt.Dimension(237, 59));
        lblTitle.setPreferredSize(new java.awt.Dimension(968, 59));

        jPanel1.setPreferredSize(new java.awt.Dimension(968, 442));

        pnlLeft.setPreferredSize(new java.awt.Dimension(410, 420));

        lblID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblID.setText("ID:");

        txfID.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txfID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txfIDFocusLost(evt);
            }
        });
        txfID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfIDActionPerformed(evt);
            }
        });

        txfFromStat.setEditable(false);
        txfFromStat.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txfFromStat.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txfFromStat.setEnabled(false);

        lblFromStat.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblFromStat.setText("From status:");

        lblToStat.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblToStat.setText("To status:");

        lblDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblDate.setText("Record:");

        txfDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F0", "F1", "F2", "F3", "F4", "F5", "KHỎI BỆNH" }));

        javax.swing.GroupLayout pnlFormLayout = new javax.swing.GroupLayout(pnlForm);
        pnlForm.setLayout(pnlFormLayout);
        pnlFormLayout.setHorizontalGroup(
            pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblToStat, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblFromStat, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                    .addComponent(lblID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txfDate, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                    .addComponent(txfFromStat, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txfID)
                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlFormLayout.setVerticalGroup(
            pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblID, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(txfID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFromStat, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(txfFromStat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblToStat, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(txfDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/refresh.png"))); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.setMaximumSize(new java.awt.Dimension(120, 50));
        btnRefresh.setPreferredSize(new java.awt.Dimension(90, 25));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/add.png"))); // NOI18N
        btnAdd.setText("Add");
        btnAdd.setMaximumSize(new java.awt.Dimension(120, 50));
        btnAdd.setPreferredSize(new java.awt.Dimension(90, 25));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/view.png"))); // NOI18N
        btnView.setText("View Profile");
        btnView.setMaximumSize(new java.awt.Dimension(120, 50));
        btnView.setPreferredSize(new java.awt.Dimension(90, 25));
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnFind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/search.png"))); // NOI18N
        btnFind.setText("Find");
        btnFind.setMaximumSize(new java.awt.Dimension(120, 50));
        btnFind.setPreferredSize(new java.awt.Dimension(90, 25));
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonLayout = new javax.swing.GroupLayout(pnlButton);
        pnlButton.setLayout(pnlButtonLayout);
        pnlButtonLayout.setHorizontalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlButtonLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                    .addComponent(btnFind, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlButtonLayout.setVerticalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnFind, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnView, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlLeftLayout = new javax.swing.GroupLayout(pnlLeft);
        pnlLeft.setLayout(pnlLeftLayout);
        pnlLeftLayout.setHorizontalGroup(
            pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLeftLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlForm, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlLeftLayout.setVerticalGroup(
            pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLeftLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlRight.setPreferredSize(new java.awt.Dimension(532, 420));

        pnlTable.setBorder(javax.swing.BorderFactory.createTitledBorder("Status List"));
        pnlTable.setPreferredSize(new java.awt.Dimension(512, 398));

        tbtStat.setAutoCreateRowSorter(true);
        tbtStat.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "From Status", "To Status", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbtStat.setPreferredSize(new java.awt.Dimension(504, 382));
        tbtStat.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbtStatMouseClicked(evt);
            }
        });
        srpTable.setViewportView(tbtStat);

        javax.swing.GroupLayout pnlTableLayout = new javax.swing.GroupLayout(pnlTable);
        pnlTable.setLayout(pnlTableLayout);
        pnlTableLayout.setHorizontalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(srpTable)
        );
        pnlTableLayout.setVerticalGroup(
            pnlTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(srpTable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlRightLayout = new javax.swing.GroupLayout(pnlRight);
        pnlRight.setLayout(pnlRightLayout);
        pnlRightLayout.setHorizontalGroup(
            pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRightLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlRightLayout.setVerticalGroup(
            pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRightLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlLeft, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlRight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlRight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlLeft, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        boolean flagID = Validator.validateEmpty(txfID), /*flagToStat = Validator.validateEmpty(txfToStat),*/
                flagDate = Validator.validateEmpty(txfDate);
        boolean check = false;
        if(flagDate && flagID /*&& flagToStat*/){
            sb.append("You can search by ID or Datetime");
            if (showStringBuilder()){
                return;
            }
        }
        else if (!flagID){
            List<ManagedHistory> lst = ManagedHistoryInf.searchManageHistory(txfID.getText());
            displayTable(lst);
            check = true;

        }else if (!flagDate){
            //DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            //LocalDateTime record = LocalDateTime.parse(DateFormatter.formatToSQLDateTime(txfDate.getText()), formatter);
            String record = DateFormatter.formatToSQLDateTime(txfDate.getText());
            System.out.println(record);
            List<ManagedHistory> lst = ManagedHistoryInf.searchManageHistoryByDate(record);
            displayTable(lst);
            check = true;
        }   
        
        if (check == false){
            MessageDialog.showErrorDialog(this, "Cannot search", "Error");
        }
        
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        txfID.setText("");
        txfFromStat.setText("");
        //txfToStat.setText("");
        txfDate.setText("");
        displayTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        validateAllField();
        if (showStringBuilder()) {
            return;
        }
        ManagedHistory mh = getManagedHistoryInformation();
        //constraintCheck(mh);
        if (showStringBuilder()) {
            return;
        }
        // get ToStatus to change other related to ToStatus++;
        int src = Arrays.asList(this.statLst).indexOf(txfFromStat.getText());
        int idx = Arrays.asList(this.statLst).indexOf(jComboBox1.getSelectedItem().toString());
        //System.out.println(idx + " " + src);
        if (src == idx){
            MessageDialog.showErrorDialog(this, "From and To status can not be same" ,"Error");
            return;
        }
        
        if (idx < 6) {
            idx++;
        }
        List<String> lstRelated = RelatedInf.searchRelated(txfID.getText());
        for (String id : lstRelated) {
            Profile prf = PatientInf.searchProfile(id);
            src = Arrays.asList(this.statLst).indexOf(prf.getStatus());
            //System.out.println("id " + id + "Profile: "+ prf.toString() + "idx: "+ idx + " des: " + src);
            if (src >= idx) {
                PatientInf.updatePatient(prf.getID(), prf.getFullName(), prf.getYoB(), prf.getAddress(), this.statLst[idx]);
                //DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                //String s = LocalDateTime.now().format(formatter);
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                LocalDateTime record = LocalDateTime.parse(DateFormatter.formatToSQLDateTime(txfDate.getText()), formatter);
                ManagedHistory obj = new ManagedHistory(prf.getID(), prf.getStatus(), this.statLst[idx], record);
                ManagedHistoryInf.addManagedHistory(obj);
                //System.out.println("Managed: " + obj);
                updateRelated(obj);
            }
        }   

        if (ManagedHistoryInf.addManagedHistory(mh)) {
            MessageDialog.showMessageDialog(this, "Add status successfully", "Notification");
            displayTable();
        } else {
            MessageDialog.showErrorDialog(this, "Add status failed", "Error");
        }

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        ProfileFrame profileFrame = new ProfileFrame(txfID.getText());
        profileFrame.setTitle("Profile information");
        profileFrame.setVisible(true);
    }//GEN-LAST:event_btnViewActionPerformed

    private void txfIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfIDActionPerformed
       changeFrom();
    }//GEN-LAST:event_txfIDActionPerformed

    private void txfIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txfIDFocusLost
        changeFrom();
    }//GEN-LAST:event_txfIDFocusLost

    private void changeFrom(){
        try {
            Profile prf = PatientInf.searchProfile(txfID.getText());
            if (Objects.isNull(prf)) {
                txfFromStat.setText("");
                return;
            }
            txfFromStat.setText(prf.getStatus());
        } catch (Exception e) {

        }
    }
    
    private void tbtStatMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbtStatMouseClicked
        try {
            DefaultTableModel model = (DefaultTableModel) tbtStat.getModel();
            int rowSelected = tbtStat.getSelectedRow();
            txfID.setText((String) model.getValueAt(rowSelected, 0));
            jComboBox1.setSelectedItem((String) model.getValueAt(rowSelected, 2));
            txfDate.setText((String) model.getValueAt(rowSelected, 3));
            changeFrom();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_tbtStatMouseClicked

    private ManagedHistory getManagedHistoryInformation() {

        String id = txfID.getText();
        String fromStatus = txfFromStat.getText();
        String toStatus = jComboBox1.getSelectedItem().toString();

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        LocalDateTime record = LocalDateTime.parse(DateFormatter.formatToSQLDateTime(txfDate.getText()), formatter);

        return new ManagedHistory(id, fromStatus, toStatus, record);
    }

    private void validateAllField() {
        Validator.validateEmpty(txfID, sb, "Empty ID");
        //Validator.validateEmpty(txfFromStat, sb, "Empty Name!");
        //Validator.validateEmpty(txfToStat, sb, "Empty Price!");
        Validator.validateEmpty(txfDate, sb, "Empty Datetime");
    }
    /*
    private void constraintCheck(ManagedHistory mh) {
        Validator.validate((!Arrays.asList(this.statLst).contains(mh.getFromStatus().toUpperCase().trim())),
                txfFromStat, sb, "Error in From Status input!");
        //Validator.validate((!Arrays.asList(this.statLst).contains(mh.getToStatus().toUpperCase().trim())),
        //        txfToStat, sb, "Error in From Status input!");
    }
    */

    private boolean showStringBuilder() {
        if (sb.length() > 0) {
            MessageDialog.showErrorDialog(this, sb.toString(), "Error");
            sb.setLength(0);
            return true;
        }
        return false;
    }

    private void displayTable() {
        DefaultTableModel model = (DefaultTableModel) tbtStat.getModel();
        model.setRowCount(0);

        List<ManagedHistory> lst = ManagedHistoryInf.getAllManagedHistorys();
        if (lst == null) {
            return;
        }
        for (ManagedHistory managedHistory : lst) {
            Object[] obj = {managedHistory.getmID(), managedHistory.getFromStatus(), managedHistory.getToStatus(),
                DateFormatter.parse(managedHistory.getRecord())};
            model.addRow(obj);
        }
    }
    
    private void displayTable(List<ManagedHistory> lst) {
        DefaultTableModel model = (DefaultTableModel) tbtStat.getModel();
        model.setRowCount(0);

        if (lst == null) {
            return;
        }
        
        for (ManagedHistory managedHistory : lst) {
            Object[] obj = {managedHistory.getmID(), managedHistory.getFromStatus(), managedHistory.getToStatus(),
                DateFormatter.parse(managedHistory.getRecord())};
            model.addRow(obj);
        }
    }

    public void updateRelated(ManagedHistory currentMH){
        
        int idx = Arrays.asList(this.statLst).indexOf(currentMH.getToStatus().toUpperCase().trim());
        
        if (idx < 6) {
            idx++;
        }

        List<String> lstRelated = RelatedInf.searchRelated(currentMH.getmID());
        for (String id : lstRelated) {
            //System.out.println(id);
            Profile prf = PatientInf.searchProfile(id);
            //System.out.println("Profile: " + prf.toString());
            int des = Arrays.asList(this.statLst).indexOf(prf.getStatus());
            //System.out.println("des:" + des);
            if (des >= idx) {
                PatientInf.updatePatient(prf.getID(), prf.getFullName(), prf.getYoB(), prf.getAddress(), this.statLst[idx]);
                //DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                //String s = LocalDateTime.now().format(formatter);
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                LocalDateTime record = LocalDateTime.parse(DateFormatter.formatToSQLDateTime(txfDate.getText()), formatter);
                ManagedHistory obj = new ManagedHistory(prf.getID(), prf.getStatus(), this.statLst[idx], record);
                //System.out.println("ManagedHistory: " + obj.toString());
                ManagedHistoryInf.addManagedHistory(obj);
                updateRelated(obj);
            }
        }   
        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblFromStat;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblToStat;
    private javax.swing.JPanel pnlButton;
    private javax.swing.JPanel pnlForm;
    private javax.swing.JPanel pnlLeft;
    private javax.swing.JPanel pnlRight;
    private javax.swing.JPanel pnlTable;
    private javax.swing.JScrollPane srpTable;
    private javax.swing.JTable tbtStat;
    private javax.swing.JTextField txfDate;
    private javax.swing.JTextField txfFromStat;
    private javax.swing.JTextField txfID;
    // End of variables declaration//GEN-END:variables
}
